import os

def ccs_amplicon_param_string():
    """
    Convert config settings to a parameter string for feeding
    to ccs_amplicon command line
    :return: A string containing the formatted parameters
    """
    config_params = config["STAGE_PARAMS"].get("CCS_AMPLICON", {})
    
    def parse_param(pair):
        """Parse a config entry from the config file"""
        # convert boolean to flag
        if pair[1] is True:
            return [pair[0]]
    
        if pair[1] is False:
            return []
        
        return pair
        
    return " ".join(["--"+" ".join([str(x) for x in parse_param([*i])]) for i in config_params.items()])


rule ccs_amplicon:
    input:
        ccs_bam = "phasing/inputs/ccs/{barcode}.bam",
        subreads_bam = "phasing/inputs/subreads/{barcode}.bam"
    output:
        fastq = "phasing/CCS_Amplicon/{barcode}/haplotypes/{barcode}.fastq",
        fasta = "phasing/CCS_Amplicon/{barcode}/haplotypes/{barcode}.fasta",
        doc = "phasing/CCS_Amplicon/{barcode}/phasing/{barcode}.html",
        stats = "phasing/CCS_Amplicon/{barcode}/phasing/{barcode}.phasing.tsv",
        chimeras = "phasing/CCS_Amplicon/{barcode}/haplotypes/{barcode}.chimera_scan.tsv"
    params:
        amplicon_params = ccs_amplicon_param_string()
    conda:
        "../envs/ccs_amplicon.yaml"
    shell:
        "ccs_amplicon.workflow -d phasing/CCS_Amplicon/{wildcards.barcode} "
        "-p {wildcards.barcode} "
        "{params.amplicon_params} "
        "{input.ccs_bam} {input.subreads_bam}"
